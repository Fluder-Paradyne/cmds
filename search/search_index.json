{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Command Reference","text":"<p>Welcome to my personal command reference! This is a collection of useful commands and scripts organized by topic.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Use the navigation menu on the left to browse different categories:</p> <ul> <li>AWS - IAM, Route53, SOC2, and related links</li> <li>Docker - Container management commands</li> <li>Kubernetes - K8s commands and utilities</li> <li>Databases - MySQL and PostgreSQL scripts</li> <li>Jenkins - CI/CD configurations</li> <li>Linux - Useful utilities and commands</li> <li>Ruby - Sidekiq and Ruby-related commands</li> <li>Java - Gradle and Java tools</li> <li>OpenSearch - Plugin development</li> <li>SSH - SSH configurations and tips</li> <li>GitHub - Helpful GitHub links</li> </ul>"},{"location":"#search","title":"Search","text":"<p>Use the search bar at the top to quickly find any command or topic. The search is powered by MkDocs and indexes all content across the site.</p> <p>Start exploring by selecting a topic from the navigation menu!</p>"},{"location":"aws/SOC2/","title":"SOC2","text":"<p>Get all RDS which have less than 7 days of backup retension <pre><code>aws rds --profile &lt;profile-name&gt; --region us-east-1 describe-db-clusters --query 'DBClusters[*].{ClusterIdentifier: DBClusterIdentifier, BackupRetentionPeriod: BackupRetentionPeriod}' --output json | jq '[.[] | select(.BackupRetentionPeriod &lt; 7)]'\n</code></pre></p> <p>enable deletion protection on for all loadbalancers <pre><code>aws elbv2 --profile prod --region us-east-1 describe-load-balancers --query 'LoadBalancers[*].LoadBalancerArn' --output text | tr '\\t' '\\n' | while IFS= read -r alb_arn; \ndo echo \"Enabling deletion protection for ALB: $alb_arn\"; \naws elbv2 --profile contlo-prod --region us-east-1 modify-load-balancer-attributes --load-balancer-arn \"$alb_arn\" --attributes Key=deletion_protection.enabled,Value=true; \ndone\n</code></pre></p> <p>Update all BackupRetentionPeriod to 35 days <pre><code>#!/bin/bash\n\naws rds --profile devops --region us-east-1 describe-db-clusters --query 'DBClusters[*].DBClusterIdentifier' --output text | tr '\\t' '\\n' | while IFS= read -r cluster_id; do\n  backup_retention=$(aws rds --profile devops@superagi.com --region us-east-1 describe-db-clusters --db-cluster-identifier \"$cluster_id\" --query 'DBClusters[0].BackupRetentionPeriod' --output text)\n\n  if [[ -n \"$backup_retention\" ]] &amp;&amp; [[ \"$backup_retention\" -lt 35 ]]; then\n    echo \"Cluster: $cluster_id has backup retention period of $backup_retention days. Updating to 35 days...\"\n    aws rds --profile devops@superagi.com --region us-east-1 modify-db-cluster --db-cluster-identifier \"$cluster_id\" --backup-retention-period 35 --apply-immediately\n    echo \"Backup retention period updated for cluster: $cluster_id\"\n  else\n    if [[ -z \"$backup_retention\" ]]; then\n      echo \"Error: Could not retrieve backup retention period for cluster: $cluster_id. Skipping.\"\n    else\n      echo \"Cluster: $cluster_id already has a backup retention period of $backup_retention days or more. Skipping.\"\n    fi\n  fi\ndone\n\necho \"Finished checking and updating backup retention period for relevant RDS clusters.\"\n</code></pre></p>"},{"location":"aws/iam/","title":"IAM","text":""},{"location":"aws/iam/#get-iam-profile-based-with-userid","title":"Get iam profile based with userId","text":"<p>aws iam list-users --profile prod --output json | jq '.Users[] | select(.UserId == \"xxxxxxxxxxxx\")'</p>"},{"location":"aws/links/","title":"Links","text":""},{"location":"aws/links/#ami-images","title":"AMI Images","text":"<p>https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#CreateTemplate</p>"},{"location":"aws/route53/","title":"Route53","text":"<p>aws route53 list-resource-record-sets --hosted-zone-id  &gt; hosted_zone_records.json"},{"location":"databases/msql/","title":"MySQL","text":"<pre><code>mysqldump -h &lt;host&gt; -u &lt;uname&gt; --password=&lt;password&gt; &lt;db_name&gt; &lt;table_name&gt; --where=\"id in (1)\" &gt; dump.sql\n</code></pre>"},{"location":"docker/commands/","title":"Commands","text":"<pre><code>docker rmi -f $(docker images -aq)\n</code></pre>"},{"location":"docker/commands/#go-inside-a-container","title":"Go inside a container","text":"<pre><code>docker run -rm -it docker-image sh\n</code></pre>"},{"location":"java/gradle/","title":"Gradle","text":""},{"location":"java/gradle/#run-gradle-commands-using-docker","title":"Run gradle commands using docker","text":"<pre><code>docker run --rm -v \"$(pwd)\":/home/gradle/project -w /home/gradle/project public.ecr.aws/docker/library/gradle:jdk17-jammy gradle dependencyUpdates\n</code></pre>"},{"location":"jenkins/jenkins/","title":"Jenkins","text":"<pre><code>printf $(kubectl get secret --namespace jenkins jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode);echo\n</code></pre>"},{"location":"jenkins/jenkins/#clean-up-jenkins-master","title":"clean up jenkins master","text":"<pre><code>kubectl run cleanup-jenkins --image=busybox --restart=Never -n jenkins --overrides='\n{\n  \"spec\": {\n    \"containers\": [\n      {\n        \"name\": \"cleanup\",\n        \"image\": \"busybox\",\n        \"command\": [\"/bin/sh\", \"-c\", \"sleep 3600\"],\n        \"volumeMounts\": [\n          {\n            \"name\": \"jenkins-home\",\n            \"mountPath\": \"/var/jenkins_home\"\n          }\n        ]\n      }\n    ],\n    \"volumes\": [\n      {\n        \"name\": \"jenkins-home\",\n        \"persistentVolumeClaim\": {\n          \"claimName\": \"jenkins\"\n        }\n      }\n    ]\n  }\n}'\n</code></pre>"},{"location":"jenkins/jenkins/#wait-for-the-pod-to-be-ready","title":"Wait for the pod to be ready","text":"<pre><code>kubectl wait --for=condition=Ready pod/cleanup-jenkins -n jenkins\n</code></pre>"},{"location":"jenkins/jenkins/#exec-into-the-cleanup-pod","title":"Exec into the cleanup pod","text":"<pre><code>kubectl exec -it cleanup-jenkins -n jenkins -- /bin/sh\n</code></pre>"},{"location":"jenkins/jenkins/#clean-up-script","title":"Clean up script","text":""},{"location":"jenkins/jenkins/#this-script-delete-all-buildslogs-of-all-jobs-leave-the-lastlatest-10-job","title":"This script delete all builds/logs of all jobs leave the last/latest 10 job","text":"<pre><code>#!/bin/bash\n# Run this script from /var/jenkins_home/jobs\n\n# For each job directory\nfor job in */; do\n    echo \"Processing job: $job\"\n\n    # Check if builds directory exists\n    if [ -d \"${job}builds\" ]; then\n        cd \"${job}builds\"\n\n        # List all build directories, sort numerically in reverse order\n        # Keep the first 10, remove the rest\n        ls -1d [0-9]* 2&gt;/dev/null | sort -rn | tail -n +11 | while read build; do\n            echo \"Removing build #$build from $job\"\n            rm -rf \"$build\"\n        done\n\n        cd ../../\n    fi\ndone\n\necho \"Cleanup completed!\"\n</code></pre>"},{"location":"k8s/commands/","title":"Commands","text":"<pre><code>kubectl delete pod &lt;pod-name&gt; -n &lt;namespace&gt; --grace-period=0\n</code></pre> <pre><code>amd64_nodes=$(kubectl get nodes -o jsonpath='{range .items[?(@.status.nodeInfo.architecture==\"amd64\")]}{.metadata.name}{\"\\n\"}{end}')\nfor node in $amd64_nodes; do\n    echo \"Pods running on node: $node\"\n    kubectl get pods --all-namespaces --field-selector spec.nodeName=\"$node\"\n    echo \"\"\ndone\n</code></pre> <p>Delete all failed pods in current namespace <pre><code>kubectl get pods --field-selector=status.phase=Failed -o name | xargs -P 10 -n 1 kubectl delete\n</code></pre></p> <p>Delete all failed pods across all namespaces</p>"},{"location":"k8s/commands/#for-completed-status-is-succeeded","title":"(for completed status is Succeeded)","text":"<pre><code>kubectl get pods --all-namespaces --field-selector=status.phase=Failed -o custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace --no-headers | \\\nawk '{print $2, $1}' | \\\nxargs -P 10 -n 2 sh -c 'kubectl delete pod $1 -n $0'\n</code></pre>"},{"location":"k8s/commands/#search-for-a-string-in-config-map","title":"Search for a string in config map","text":"<pre><code>for cm in $(kubectl get configmap -o name); do   echo \"--- Processing $cm ---\";   kubectl get \"$cm\" -o yaml | grep -q 'test string' &amp;&amp; echo \"Found 'AKIAYX2ZQI577ABR6GSM' in $cm\"; done\n</code></pre>"},{"location":"k8s/commands/#get-all-the-envs-set-while-masking-values-also-skips-some-servicek8s-related-envs","title":"Get all the envs set while masking values, also skips some service/k8s related envs","text":"<pre><code>kubectl -n super-crm-staging exec -it &lt;pod-name&gt; -- printenv \\\n  | tr -d '\\r' \\\n  | grep -vE '(_TCP_PROTO=|_TCP=|_PORT_HTTP=|_TCP_ADDR=|_TCP_PORT=|_HOST=|_PORT=)' \\\n  | sed 's/=.*/=****/' \\\n  | sort\n</code></pre>"},{"location":"k8s/commands/#get-pvc-usage","title":"Get PVC usage","text":"<pre><code>kubectl df-pv -n &lt;namespace&gt;\n</code></pre>"},{"location":"k8s/commands/#get-haproxy-config","title":"Get HaProxy config","text":"<pre><code>kubectl exec -nhaproxy haproxy-ingress-kubernetes-ingress-7d8598b786-2zms2 -- cat /etc/haproxy/haproxy.cfg\n</code></pre>"},{"location":"k8s/commands/#force-remove-nodes-stuck-in-notready-or-terminating-state","title":"Force remove nodes stuck in NotReady or Terminating state","text":"<pre><code>for node in $(kubectl get nodes --no-headers | awk '$2==\"NotReady\" || $2==\"Terminating\"{print $1}'); do\n  kubectl patch node \"$node\" -p '{\"metadata\":{\"finalizers\":[]}}' --type=merge\ndone\n</code></pre>"},{"location":"k8s/commands/#cordon-node","title":"Cordon node","text":"<pre><code>kubectl cordon &lt;node-name&gt;\n</code></pre>"},{"location":"k8s/commands/#drain-a-particular-node","title":"Drain a particular node","text":"<pre><code>kubectl drain &lt;node-name&gt; --ignore-daemonsets --delete-emptydir-data\n</code></pre>"},{"location":"links/github/","title":"Links","text":""},{"location":"links/github/#usefull-link","title":"Usefull link","text":"<p>Creating branch protection using cli https://github.com/cli/cli/issues/3528</p>"},{"location":"linux/utils/","title":"Utilities","text":""},{"location":"linux/utils/#speedtest","title":"Speedtest","text":"<pre><code>curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -\n</code></pre>"},{"location":"linux/utils/#find-files-larger-than-1gb","title":"find files larger than 1GB","text":"<pre><code>find . -type f -size +1G\n</code></pre>"},{"location":"opensearch/plugin/","title":"Plugin","text":""},{"location":"opensearch/plugin/#commands-to-start-opensearch-dashboard","title":"Commands to start opensearch dashboard","text":"<pre><code>nvm use 20.18.3\n</code></pre> <pre><code>yarn start --no-base-path \n</code></pre>"},{"location":"psql/scripts/","title":"PostgreSQL","text":"<pre><code>CREATE ROLE readonly;\n\nGRANT CONNECT ON DATABASE &lt;dbName&gt; TO readonly;\n\nGRANT USAGE ON SCHEMA public TO readonly;\n\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\n\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\nCREATE ROLE readwrite\n\nGRANT CONNECT ON DATABASE &lt;dbName&gt; TO readwrite;\n\nGRANT USAGE ON SCHEMA public TO readwrite;\n\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO readwrite;\n\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO readwrite;\n\nGRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO readwrite;\n\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE ON SEQUENCES TO readwrite;\n\nCREATE USER reader WITH PASSWORD '&lt;password&gt;';\n\nGRANT readonly TO reader;\n</code></pre>"},{"location":"ruby/sidekiq/","title":"Sidekiq","text":""},{"location":"ruby/sidekiq/#to-delete-all-bulkreindexjob-trying-to-reindex-lead-into-a-particualr-index","title":"To delete all BulkReindexJob, trying to reindex Lead, into a particualr index","text":"<pre><code>job_klass_set = Set.new\njb = nil\ncount = 0\nSidekiq::Queue.all.each do |queue|\n  if queue.name != 'searchkick'\n    next\n  end\n  queue.each do |job|\n    job_klass_set.add(job.args[0][\"job_class\"]) if job.args[0].is_a?(Hash) &amp;&amp; job.args[0][\"job_class\"]\n    if job.args[0][\"job_class\"] == \"Searchkick::BulkReindexJob\"\n      jb = job\n      if jb.args[0][\"arguments\"][0][\"class_name\"]  == \"Lead\" &amp;&amp; jb.args[0][\"arguments\"][0][\"index_name\"]  == \"lead_production\"\n        jb.delete\n      end\n    end\n  end\nend\npp \"number of jobs: #{count}\"\n</code></pre>"},{"location":"ssh/ssh/","title":"To keep the DynamicForward alive forever","text":"<p><code>autossh -M 0 -f -N -D 9051 ubuntu@jumpbox</code></p>"}]}